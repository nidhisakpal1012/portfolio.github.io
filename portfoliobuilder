import React, { useState } from 'react';
import { User, Code, Briefcase, Mail, PlusCircle, Trash2, Building2, Image } from 'lucide-react'; // Importing new icon Image

// Main App component for the Portfolio Builder
const App = () => {
  // State variables to hold portfolio data
  const [name, setName] = useState('John Doe');
  const [tagline, setTagline] = useState('Full-stack Developer | Designer | Innovator');
  const [about, setAbout] = useState('Passionate and results-driven professional with a strong background in web development and UI/UX design. I enjoy building impactful digital experiences.');
  const [skills, setSkills] = useState(['React', 'Node.js', 'Tailwind CSS', 'JavaScript', 'HTML', 'CSS', 'Figma']);
  const [projects, setProjects] = useState([
    {
      title: 'E-commerce Platform',
      description: 'Developed a responsive e-commerce site with user authentication, product catalog, and shopping cart functionality.',
      link: 'https://example.com/ecommerce'
    },
    {
      title: 'Task Management App',
      description: 'Built a collaborative task management application with real-time updates and drag-and-drop interface.',
      link: 'https://example.com/tasks'
    }
  ]);
  const [experiences, setExperiences] = useState([
    {
      title: 'Senior Software Engineer',
      company: 'Tech Solutions Inc.',
      duration: 'Jan 2022 - Present',
      description: 'Led development of scalable web applications, optimized database queries, and mentored junior developers.'
    },
    {
      title: 'Junior Web Developer',
      company: 'Creative Agency',
      duration: 'Jul 2019 - Dec 2021',
      description: 'Developed and maintained client websites, collaborating with design and marketing teams.'
    }
  ]);
  const [contactEmail, setContactEmail] = useState('john.doe@example.com');
  const [avatarUrl, setAvatarUrl] = useState('https://placehold.co/150x150/A78BFA/FFFFFF?text=JD'); // New state for avatar URL
  const [newSkill, setNewSkill] = useState('');
  const [newProject, setNewProject] = useState({ title: '', description: '', link: '' });
  const [newExperience, setNewExperience] = useState({ title: '', company: '', duration: '', description: '' });

  // Function to add a new skill
  const addSkill = () => {
    if (newSkill.trim() !== '' && !skills.includes(newSkill.trim())) {
      setSkills([...skills, newSkill.trim()]);
      setNewSkill('');
    }
  };

  // Function to remove a skill
  const removeSkill = (skillToRemove) => {
    setSkills(skills.filter(skill => skill !== skillToRemove));
  };

  // Function to add a new project
  const addProject = () => {
    if (newProject.title.trim() !== '' && newProject.description.trim() !== '') {
      setProjects([...projects, newProject]);
      setNewProject({ title: '', description: '', link: '' });
    }
  };

  // Function to remove a project
  const removeProject = (projectToRemove) => {
    setProjects(projects.filter(project => project !== projectToRemove));
  };

  // Function to add a new experience
  const addExperience = () => {
    if (newExperience.title.trim() !== '' && newExperience.company.trim() !== '' && newExperience.duration.trim() !== '') {
      setExperiences([...experiences, newExperience]);
      setNewExperience({ title: '', company: '', duration: '', description: '' });
    }
  };

  // Function to remove an experience
  const removeExperience = (experienceToRemove) => {
    setExperiences(experiences.filter(exp => exp !== experienceToRemove));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 to-blue-100 font-inter antialiased p-4 md:p-8 flex flex-col lg:flex-row gap-8">
      {/* Input Section (Left Side for larger screens) */}
      <div className="lg:w-1/2 bg-white p-6 md:p-8 rounded-lg shadow-xl overflow-y-auto max-h-[90vh] flex-shrink-0">
        <h1 className="text-3xl font-bold text-gray-800 mb-6 border-b pb-3 border-gray-200">Portfolio Builder</h1>

        {/* Basic Info Section */}
        <div className="mb-6">
          <label htmlFor="name" className="block text-gray-700 text-sm font-semibold mb-2">Your Name</label>
          <input
            type="text"
            id="name"
            className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="e.g., Jane Doe"
          />
        </div>

        <div className="mb-6">
          <label htmlFor="tagline" className="block text-gray-700 text-sm font-semibold mb-2">Tagline</label>
          <input
            type="text"
            id="tagline"
            className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
            value={tagline}
            onChange={(e) => setTagline(e.target.value)}
            placeholder="e.g., Web Developer | UI/UX Enthusiast"
          />
        </div>

        <div className="mb-6">
          <label htmlFor="about" className="block text-gray-700 text-sm font-semibold mb-2">About You</label>
          <textarea
            id="about"
            className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors h-32 resize-y"
            value={about}
            onChange={(e) => setAbout(e.target.value)}
            placeholder="Tell us about yourself..."
          ></textarea>
        </div>

        {/* Avatar Section */}
        <div className="mb-6">
          <label htmlFor="avatarUrl" className="block text-gray-700 text-sm font-semibold mb-2">Avatar Image URL</label>
          <input
            type="url"
            id="avatarUrl"
            className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
            value={avatarUrl}
            onChange={(e) => setAvatarUrl(e.target.value)}
            placeholder="e.g., https://example.com/your-avatar.jpg"
          />
        </div>

        {/* Skills Section */}
        <div className="mb-6">
          <label className="block text-gray-700 text-sm font-semibold mb-2">Skills</label>
          <div className="flex flex-wrap gap-2 mb-3">
            {skills.map((skill, index) => (
              <span key={index} className="flex items-center bg-purple-100 text-purple-800 px-3 py-1 rounded-full text-sm font-medium">
                {skill}
                <button
                  onClick={() => removeSkill(skill)}
                  className="ml-2 text-purple-600 hover:text-purple-900 focus:outline-none"
                  aria-label={`Remove skill ${skill}`}
                >
                  <Trash2 size={16} />
                </button>
              </span>
            ))}
          </div>
          <div className="flex gap-2">
            <input
              type="text"
              className="flex-grow p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
              value={newSkill}
              onChange={(e) => setNewSkill(e.target.value)}
              placeholder="Add a new skill (e.g., Python)"
              onKeyPress={(e) => { if (e.key === 'Enter') addSkill(); }}
            />
            <button
              onClick={addSkill}
              className="bg-purple-600 text-white p-3 rounded-md hover:bg-purple-700 transition-colors flex items-center justify-center"
              aria-label="Add skill"
            >
              <PlusCircle size={20} />
            </button>
          </div>
        </div>

        {/* Experiences Section */}
        <div className="mb-6">
          <label className="block text-gray-700 text-sm font-semibold mb-2">Experiences</label>
          <div className="space-y-4 mb-4">
            {experiences.map((exp, index) => (
              <div key={index} className="bg-gray-50 p-4 rounded-md border border-gray-200 flex justify-between items-center">
                <div>
                  <h4 className="font-semibold text-gray-900">{exp.title} at {exp.company}</h4>
                  <p className="text-sm text-gray-600">{exp.duration}</p>
                  <p className="text-sm text-gray-600">{exp.description}</p>
                </div>
                <button
                  onClick={() => removeExperience(exp)}
                  className="text-red-500 hover:text-red-700 focus:outline-none"
                  aria-label={`Remove experience ${exp.title}`}
                >
                  <Trash2 size={20} />
                </button>
              </div>
            ))}
          </div>
          <div className="space-y-3">
            <input
              type="text"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
              placeholder="Job Title (e.g., Software Engineer)"
              value={newExperience.title}
              onChange={(e) => setNewExperience({ ...newExperience, title: e.target.value })}
            />
            <input
              type="text"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
              placeholder="Company Name (e.g., Google)"
              value={newExperience.company}
              onChange={(e) => setNewExperience({ ...newExperience, company: e.target.value })}
            />
            <input
              type="text"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
              placeholder="Duration (e.g., Jan 2020 - Dec 2023)"
              value={newExperience.duration}
              onChange={(e) => setNewExperience({ ...newExperience, duration: e.target.value })}
            />
            <textarea
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors h-24 resize-y"
              placeholder="Description (e.g., Developed and maintained..."
              value={newExperience.description}
              onChange={(e) => setNewExperience({ ...newExperience, description: e.target.value })}
            ></textarea>
            <button
              onClick={addExperience}
              className="w-full bg-purple-600 text-white p-3 rounded-md hover:bg-purple-700 transition-colors flex items-center justify-center gap-2"
            >
              <PlusCircle size={20} /> Add Experience
            </button>
          </div>
        </div>

        {/* Projects Section */}
        <div className="mb-6">
          <label className="block text-gray-700 text-sm font-semibold mb-2">Projects</label>
          <div className="space-y-4 mb-4">
            {projects.map((project, index) => (
              <div key={index} className="bg-gray-50 p-4 rounded-md border border-gray-200 flex justify-between items-center">
                <div>
                  <h4 className="font-semibold text-gray-900">{project.title}</h4>
                  <p className="text-sm text-gray-600">{project.description}</p>
                  {project.link && (
                    <a href={project.link} target="_blank" rel="noopener noreferrer" className="text-purple-600 text-sm hover:underline">
                      View Project
                    </a>
                  )}
                </div>
                <button
                  onClick={() => removeProject(project)}
                  className="text-red-500 hover:text-red-700 focus:outline-none"
                  aria-label={`Remove project ${project.title}`}
                >
                  <Trash2 size={20} />
                </button>
              </div>
            ))}
          </div>
          <div className="space-y-3">
            <input
              type="text"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
              placeholder="Project Title"
              value={newProject.title}
              onChange={(e) => setNewProject({ ...newProject, title: e.target.value })}
            />
            <textarea
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors h-24 resize-y"
              placeholder="Project Description"
              value={newProject.description}
              onChange={(e) => setNewProject({ ...newProject, description: e.target.value })}
            ></textarea>
            <input
              type="url"
              className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
              placeholder="Project Link (Optional)"
              value={newProject.link}
              onChange={(e) => setNewProject({ ...newProject, link: e.target.value })}
            />
            <button
              onClick={addProject}
              className="w-full bg-purple-600 text-white p-3 rounded-md hover:bg-purple-700 transition-colors flex items-center justify-center gap-2"
            >
              <PlusCircle size={20} /> Add Project
            </button>
          </div>
        </div>

        {/* Contact Info Section */}
        <div className="mb-6">
          <label htmlFor="contactEmail" className="block text-gray-700 text-sm font-semibold mb-2">Contact Email</label>
          <input
            type="email"
            id="contactEmail"
            className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 transition-colors"
            value={contactEmail}
            onChange={(e) => setContactEmail(e.target.value)}
            placeholder="e.g., your.email@example.com"
          />
        </div>
      </div>

      {/* Portfolio Preview Section (Right Side for larger screens) */}
      <div className="lg:w-1/2 bg-white p-6 md:p-8 rounded-lg shadow-xl overflow-y-auto max-h-[90vh]">
        <h2 className="text-3xl font-bold text-gray-800 mb-6 border-b pb-3 border-gray-200">Portfolio Preview</h2>

        {/* Header Section */}
        <div className="text-center mb-10">
          {avatarUrl && (
            <div className="mb-4">
              <img
                src={avatarUrl}
                alt="Avatar"
                className="w-32 h-32 rounded-full mx-auto object-cover border-4 border-purple-400 shadow-md"
                onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/150x150/A78BFA/FFFFFF?text=JD'; }} // Fallback image
              />
            </div>
          )}
          <h1 className="text-4xl font-extrabold text-gray-900 mb-2">{name}</h1>
          <p className="text-xl text-gray-600">{tagline}</p>
        </div>

        {/* About Section */}
        <section className="mb-8 p-4 bg-purple-50 rounded-lg shadow-sm">
          <h3 className="text-2xl font-semibold text-purple-700 mb-4 flex items-center gap-2">
            <User size={24} /> About Me
          </h3>
          <p className="text-gray-700 leading-relaxed">{about}</p>
        </section>

        {/* Skills Section */}
        <section className="mb-8 p-4 bg-green-50 rounded-lg shadow-sm">
          <h3 className="text-2xl font-semibold text-green-700 mb-4 flex items-center gap-2">
            <Code size={24} /> Skills
          </h3>
          <div className="flex flex-wrap gap-3">
            {skills.map((skill, index) => (
              <span key={index} className="bg-green-200 text-green-800 px-4 py-2 rounded-full font-medium shadow-sm">
                {skill}
              </span>
            ))}
          </div>
        </section>

        {/* Experiences Section */}
        <section className="mb-8 p-4 bg-orange-50 rounded-lg shadow-sm">
          <h3 className="text-2xl font-semibold text-orange-700 mb-4 flex items-center gap-2">
            <Building2 size={24} /> Experience
          </h3>
          <div className="grid grid-cols-1 gap-6">
            {experiences.map((exp, index) => (
              <div key={index} className="bg-white p-5 rounded-lg shadow-md border border-orange-200">
                <h4 className="text-xl font-semibold text-gray-900 mb-1">{exp.title}</h4>
                <p className="text-md text-gray-700 mb-1">{exp.company} <span className="text-gray-500 text-sm ml-2">({exp.duration})</span></p>
                <p className="text-gray-600 text-sm">{exp.description}</p>
              </div>
            ))}
          </div>
        </section>

        {/* Projects Section */}
        <section className="mb-8 p-4 bg-blue-50 rounded-lg shadow-sm">
          <h3 className="text-2xl font-semibold text-blue-700 mb-4 flex items-center gap-2">
            <Briefcase size={24} /> Projects
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-1 gap-6">
            {projects.map((project, index) => (
              <div key={index} className="bg-white p-5 rounded-lg shadow-md border border-blue-200">
                <h4 className="text-xl font-semibold text-gray-900 mb-2">{project.title}</h4>
                <p className="text-gray-700 mb-3">{project.description}</p>
                {project.link && (
                  <a
                    href={project.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center text-blue-600 hover:underline font-medium"
                  >
                    View Project
                    <svg className="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg>
                  </a>
                )}
              </div>
            ))}
          </div>
        </section>

        {/* Contact Section */}
        <section className="p-4 bg-red-50 rounded-lg shadow-sm">
          <h3 className="text-2xl font-semibold text-red-700 mb-4 flex items-center gap-2">
            <Mail size={24} /> Contact
          </h3>
          <p className="text-gray-700">
            You can reach me at: <a href={`mailto:${contactEmail}`} className="text-red-600 hover:underline font-medium">{contactEmail}</a>
          </p>
        </section>
      </div>
    </div>
  );
};

export default App;
